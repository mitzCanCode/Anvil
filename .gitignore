# Xcode
#
# gitignore contributors: remember to update Global/Xcode.gitignore, Objective-C.gitignore & Swift.gitignore

## User settings
xcuserdata/

## Xcode 8 and later compatibility issues
*.xcscmblueprint
*.xccheckout

## Xcode 4 compatibility issues
*.moved-aside
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3

## Build generated
build/
DerivedData/

## Various settings
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3
xcuserdata/

## Other
*.moved-aside
*.xcuserstate

## Obj-C/Swift specific
*.hmap
*.ipa
*.dSYM.zip
*.dSYM

## Playgrounds
timeline.xctimeline
playground.xcworkspace

# Swift Package Manager
#
# Add this line if you want to avoid checking in source code from Swift Package Manager dependencies.
# Packages/
.build/

# Xcode automatically generates this directory with a .xcworkspacedata file and xcshareddata dir
# hence it is not needed unless you have added a package configuration file to your project
# .swiftpm

.swiftpm/xcode/package.xcworkspace/contents.xcworkspacedata
.netrc

# CocoaPods
#
# We recommend against adding the Pods directory to your .gitignore. However
# you should judge for yourself, the pros and cons are mentioned at:
# https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control
#
# Pods/

# Carthage
#
# Add this line if you want to avoid checking in source code from Carthage dependencies.
# Carthage/Checkouts

Carthage/Build

# Accio dependency management
Dependencies/
.accio/

# fastlane
#
# It is recommended to not store the screenshots in the git repo. Instead, use fastlane to re-generate the
# screenshots whenever they are needed.
# For more information about the recommended setup visit:
# https://docs.fastlane.tools/best-practices/source-control/

fastlane/report.xml
fastlane/Preview.html
fastlane/screenshots/**/*.png
fastlane/test_output

# Code Injection
#
# After new code Injection tools there's a generated folder /iOSInjectionProject
# https://github.com/johnno1962/injectionforxcode

iOSInjectionProject/

# macOS
.DS_Store
.AppleDouble
.LSOverride

# Icon must end with two \r
Icon


# Thumbnails
._*

# Files that might appear in the root of a volume
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Archive & Backup files
*.zip
*.tar
*.tar.gz
*.rar

# Test coverage
*.gcov
*.gcda
*.gcno
lcov.info

# Instruments
*.trace

# Simulator data
*.hcdp

# App Store Connect API Key files
AuthKey_*.p8

# IDE specific files
.vscode/
.idea/

# Temporary files
*.tmp
*.swp
*.swo
*~

# Log files
*.log

# Crash logs
*.crash

# SENSITIVE FILES - API Keys & Configuration
# Google Services & Firebase
GoogleService-Info.plist
GoogleService-Info-*.plist
google-services.json
firebase_app_id_file.json

# API Keys and Secrets
APIKeys.plist
Secrets.plist
Config.plist
*-secrets.plist
*.apikey
*.secret
*.token

# Environment files with potential secrets
.env
.env.local
.env.production
.env.staging
.env.*

# Certificates and signing
*.p12
*.cer
*.mobileprovision
*.provisionprofile
*.certSigningRequest

# Private keys
*.pem
*.key
*_rsa
*_rsa.pub

# Keystore files
*.keystore
*.jks

# Configuration files that might contain sensitive data
credentials.json
settings.json
config.json

# Database files
*.db
*.sqlite
*.sqlite3

# Backup files that might contain sensitive data
*.backup
*.bak
*.orig
